@inherits LayoutComponentBase
@inject NavigationManager _Nav
@inject IJSRuntime JS
@namespace Moamalat.Components
<!-- DOC: script to save and load page settings -->
<script>
    /**
     *	This script should be placed right after the body tag for fast execution
     *	Note: the script is written in pure javascript and does not depend on thirdparty library
     **/
    'use strict';

    var classHolder = document.getElementsByTagName("BODY")[0],
        /**
         * Load from localstorage
         **/
        themeSettings = (localStorage.getItem('themeSettings')) ? JSON.parse(localStorage.getItem('themeSettings')) :
            {},
        themeURL = themeSettings.themeURL || '',
        themeOptions = themeSettings.themeOptions || '';
    /**
     * Load theme options
     **/
    if (themeSettings.themeOptions) {
        classHolder.className = themeSettings.themeOptions;
        console.log("%c✔ Theme settings loaded", "color: #148f32");
    }
    else {
        console.log("Heads up! Theme settings is empty or does not exist, loading default settings...");
    }
    if (themeSettings.themeURL && !document.getElementById('mytheme')) {
        var cssfile = document.createElement('link');
        cssfile.id = 'mytheme';
        cssfile.rel = 'stylesheet';
        cssfile.href = themeURL;
        document.getElementsByTagName('head')[0].appendChild(cssfile);
    }
    /**
     * Save to localstorage
     **/
    var saveSettings = function () {
        themeSettings.themeOptions = String(classHolder.className).split(/[^\w-]+/).filter(function (item) {
            return /^(nav|header|mod|display)-/i.test(item);
        }).join(' ');
        if (document.getElementById('mytheme')) {
            themeSettings.themeURL = document.getElementById('mytheme').getAttribute("href");
        };
        localStorage.setItem('themeSettings', JSON.stringify(themeSettings));
    }
    /**
     * Reset settings
     **/
    var resetSettings = function () {
        localStorage.setItem("themeSettings", "");
    }

</script>
<!-- BEGIN Page Content -->
<div class="page-wrapper">
    @* <div class="logo-center">
    <img src="_content/Moamalat.Shared/img/svg/Icons/moamalatLogo-yellow.svg" alt="Moamalat" aria-roledescription="logo">
    <i class="fa fa-bars d-inline-block ml-1 fs-lg color-primary-300"></i>
    </div> *@

    <LoadingHandlerComponent />

    <div class="page-inner">
        <NavMenu />
        <div class="page-content-wrapper">
            <PageHeader />
            <!-- the #js-page-content id is needed for some plugins to initialize -->
            <main id="js-page-content" role="main" class="page-content">
                <CustomErrorBoundary @ref="errorBoundary">
                    <ChildContent>
                        @Body
                    </ChildContent>
                    <ErrorContent Context="_Exception">
                        <CustomErrorComponent _exception="_Exception" errorBoundary="errorBoundary" />
                    </ErrorContent>
                </CustomErrorBoundary>
            </main>
            <PageFooter />
        </div>
    </div>
</div>



<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
@code
{
    public CustomErrorBoundary errorBoundary { get; set; } = new();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var isHomePage = _Nav.Uri.EndsWith("/", StringComparison.OrdinalIgnoreCase);
            var cssFile = isHomePage ? "_content/Moamalat.Shared/css/page-home.css" : "_content/Moamalat.Shared/css/page-inside.css";
            Console.WriteLine($"Loading CSS file: {cssFile}");
            await JS.InvokeVoidAsync("loadCssFile", cssFile);
        }
    }
}
